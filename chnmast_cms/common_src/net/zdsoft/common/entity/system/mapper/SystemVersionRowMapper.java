package net.zdsoft.common.entity.system.mapper;import java.sql.ResultSet;import java.sql.SQLException;import java.util.Date;import org.springframework.jdbc.core.RowMapper;import net.zdsoft.common.entity.system.SystemVersion;import net.zdsoft.keel.jdbc.MapRowMapper;import net.zdsoft.keel.jdbc.MultiRowMapper;/** * 系统版本 *  * @author dongzk *  */public class SystemVersionRowMapper {    private static SystemVersionMapRow VersionRowMapper = new SystemVersionMapRow();    private static SystemVersionIdMapRow VersionIdRowMapper = new SystemVersionIdMapRow();    private static SystemCurDbDateMapRow curDbDateRowMapper = new SystemCurDbDateMapRow();    private static SystemVersionMapRowMapper VersionIdMapRowMapper = new SystemVersionMapRowMapper();    private static SystemVersionMultiRowMapper VersionMultiRowMapper = new SystemVersionMultiRowMapper();    public static SystemVersionMapRow instanceVersion() {        return VersionRowMapper;    }    public static SystemVersionIdMapRow instanceVersionId() {        return VersionIdRowMapper;    }    public static SystemCurDbDateMapRow instanceCurDbDate() {        return curDbDateRowMapper;    }    public static SystemVersionMapRowMapper instanceVersionMapRowMapper() {        return VersionIdMapRowMapper;    }    public static SystemVersionMultiRowMapper instanceVersionMultiRowMapper() {        return VersionMultiRowMapper;    }    public static SystemVersion setFields(ResultSet rs) throws SQLException {        SystemVersion systemVersion = new SystemVersion();        systemVersion.setId(rs.getLong("id"));        systemVersion.setEdition(rs.getString("edition"));        systemVersion.setClient(rs.getString("client"));        systemVersion.setDescription(rs.getString("description"));        systemVersion.setUpgradeDate(rs.getTimestamp("upgradedate"));        systemVersion.setVersion(rs.getString("version"));        systemVersion.setBuild(rs.getString("build"));        systemVersion.setDescFile(rs.getString("desc_file"));        return systemVersion;    }    /**     * 映射整个对象     *      * @author dongzk     * @version $Revision: 1.0 $, $Date: 2013-8-14 下午5:55:09 $     */    static class SystemVersionMapRow implements RowMapper<SystemVersion> {        @Override        public SystemVersion mapRow(ResultSet rs, int i) throws SQLException {            return setFields(rs);        }    }    /**     * 映射ID字段     *      * @author dongzk     * @version $Revision: 1.0 $, $Date: 2013-8-14 下午5:55:20 $     */    static class SystemVersionIdMapRow implements RowMapper<Long> {        @Override        public Long mapRow(ResultSet rs, int i) throws SQLException {            return rs.getLong("id");        }    }    /**     * 映射日期字段     *      * @author dongzk     * @version $Revision: 1.0 $, $Date: 2013-8-14 下午5:55:20 $     */    static class SystemCurDbDateMapRow implements RowMapper<Date> {        @Override        public Date mapRow(ResultSet rs, int i) throws SQLException {            return rs.getTimestamp("curdbdate");        }    }    /**     * 映射成一个Map<id, SystemVersion>     *      * @author dongzk     * @version $Revision: 1.0 $, $Date: 2013-8-14 下午5:56:07 $     */    static class SystemVersionMapRowMapper implements MapRowMapper<Long, SystemVersion> {        @Override        public Long mapRowKey(ResultSet rs, int rowNum) throws SQLException {            return rs.getLong("id");        }        @Override        public SystemVersion mapRowValue(ResultSet rs, int rowNum) throws SQLException {            return setFields(rs);        }    }    static class SystemVersionMultiRowMapper implements MultiRowMapper<SystemVersion> {        @Override        public SystemVersion mapRow(ResultSet rs, int rowNum) throws SQLException {            return setFields(rs);        }    }}