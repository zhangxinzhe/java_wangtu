package net.zdsoft.common.entity.wxb.mapper;import java.sql.ResultSet;import java.sql.SQLException;import org.springframework.jdbc.core.RowMapper;import net.zdsoft.common.entity.wxb.Wxb;import net.zdsoft.common.enums.DogNoExpireType;import net.zdsoft.common.enums.ServerStatusType;/** * 无限宝服务器【t_wxb】 * * @author * */@SuppressWarnings("rawtypes")public class WxbRowMapper implements RowMapper {    private static WxbRowMapper rowMapper = new WxbRowMapper();    public static ServerRowMapper4Wxb rowMapper4Wxb = new ServerRowMapper4Wxb();    public static ServerRowMapper4Mobile rowMapper4Mobile = new ServerRowMapper4Mobile();    public static WxbRowMapper instance() {        return rowMapper;    }    static class ServerRowMapper4Wxb implements RowMapper {        @Override        public Object mapRow(ResultSet rs, int arg1) throws SQLException {            Wxb server = new Wxb();            server.setMasterLoginUrl(rs.getString("master_login_url"));            server.setSlaveLoginUrl(rs.getString("slave_login_url"));            server.setTransferLoginUrl(rs.getString("transfer_login_url"));            server.setLoginPort(rs.getLong("loginport"));            return server;        }    }    static class ServerRowMapper4Mobile implements RowMapper {        @Override        public Object mapRow(ResultSet rs, int arg1) throws SQLException {            Wxb server = new Wxb();            server.setMasterLoginUrl(rs.getString("master_login_url"));            server.setSlaveLoginUrl(rs.getString("slave_login_url"));            server.setCommandPort(rs.getLong("COMMANDPORT"));            return server;        }    }    @Override    public Object mapRow(ResultSet rs, int i) throws SQLException {        Wxb server = new Wxb();        server.setId(rs.getLong("id"));        server.setName(rs.getString("name"));        server.setRegion(rs.getString("region"));        server.setMasterLoginUrl(rs.getString("MASTER_LOGIN_URL"));        server.setSlaveLoginUrl(rs.getString("SLAVE_LOGIN_URL"));        server.setTransferLoginUrl(rs.getString("TRANSFER_LOGIN_URL"));        server.setLoginPort(rs.getLong("LOGINPORT"));        server.setMonitorPort(rs.getLong("MONITORPORT"));        server.setCommandPort(rs.getLong("COMMANDPORT"));        server.setMaxCapacity(rs.getLong("MAXCAPACITY"));        server.setFtpUrl(rs.getString("FTPURL"));        server.setFtpPort(rs.getLong("FTPPORT"));        server.setFtpAccount(rs.getString("FTPACCOUNT"));        server.setFtpPassword(rs.getString("FTPPASSWORD"));        server.setStatus(ServerStatusType.get(rs.getInt("STATUS")));        server.setRemark(rs.getString("REMARK"));        server.setCuserId(rs.getLong("CUSERID"));        server.setCreateTime(rs.getTimestamp("CREATETIME"));        server.setDogName(rs.getString("DOG_NAME"));        server.setDogNo(rs.getString("DOG_NO"));        server.setDogNoExpire(DogNoExpireType.get(rs.getInt("DOG_NOEXPIRE")));        server.setDogEndTime(rs.getTimestamp("DOG_ENDTIME"));        server.setProxyNum(rs.getInt("PROXY_NUM"));        server.setLastSynDate(rs.getTimestamp("LAST_SYN_DATE"));        server.setBandWidth(rs.getInt("BAND_WIDTH"));        return server;    }}