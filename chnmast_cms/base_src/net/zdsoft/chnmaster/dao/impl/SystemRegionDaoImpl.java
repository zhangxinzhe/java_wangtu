package net.zdsoft.chnmaster.dao.impl;import java.util.List;import java.util.Map;import org.springframework.stereotype.Repository;import net.zdsoft.chnmaster.dao.SystemRegionDao;import net.zdsoft.common.dao.BaseDaoImpl;import net.zdsoft.common.entity.PageDto;import net.zdsoft.common.entity.system.SystemRegion;import net.zdsoft.common.entity.system.mapper.SystemRegionRowMapper;/** * @author y * @version $Revision: 1.0 $, $Date: 2013-8-7 下午3:24:57 $ */@Repository("systemRegionDao")public class SystemRegionDaoImpl extends BaseDaoImpl implements SystemRegionDao {    private static final String save_system_region = "system.save_system_region";    private static final String update_system_region = "system.update_system_region";    private static final String delete_system_region_byid = "system.delete_system_region_byid";    private static final String get_system_region_byid = "system.get_system_region_byid";    private static final String list_system_region = "system.list_system_region";    private static final String get_system_region_by_fullcode = "system.get_region_by_fullcode";    private static final String get_system_region_by_name = "system.get_region_by_name";    private static final String get_system_region_like_spell = "system.get_system_region_like_spell";    private static final String get_system_region_like_code = "system.get_system_region_like_code";    // 获取省地区信息列表SQL    private static final String list_region_province = "system.list_system_region_province";    // 获取市地区信息列表SQL    private static final String list_region_city = "system.list_system_region_city";    // 获取区县地区信息列表SQL    private static final String list_region_county = "system.list_system_region_county";    private static final String map_system_regions_by_name = "system.map_system_regions_by_name";    @Override    public int saveSystemRegion(SystemRegion systemRegion) {        return executeUpdate(getSql(save_system_region),                new Object[] { systemRegion.getId(), systemRegion.getRegionCode(), systemRegion.getRegionName(),                        systemRegion.getFullCode(), systemRegion.getFullName(), systemRegion.getShortSpell() });    }    @Override    public int deleteSystemRegion(String id) {        return executeUpdate(getSql(delete_system_region_byid), new Object[] { id });    }    @Override    public int updateSystemRegion(SystemRegion systemRegion) {        return this.executeUpdate(getSql(update_system_region),                new Object[] { systemRegion.getRegionCode(), systemRegion.getRegionName(), systemRegion.getFullCode(),                        systemRegion.getFullName(), systemRegion.getShortSpell(), systemRegion.getId() });    }    @Override    public SystemRegion getSystemRegion(String id) {        return (SystemRegion) findForObject(getSql(get_system_region_byid), new Object[] { id },                SystemRegionRowMapper.instance());    }    @SuppressWarnings("unchecked")    @Override    public List<SystemRegion> getSystemRegions() {        return this.find(getSql(list_system_region), new Object[] {}, SystemRegionRowMapper.instance());    }    @SuppressWarnings("unchecked")    @Override    public List<SystemRegion> getSystemRegions(PageDto page) {        return this.findForPage(getSql(list_system_region), new Object[] {}, SystemRegionRowMapper.instance(), page);    }    @Override    public SystemRegion getSystemRegionByFullCode(String code) {        return (SystemRegion) this.findForObject(getSql(get_system_region_by_fullcode), new Object[] { code },                SystemRegionRowMapper.instance());    }    @SuppressWarnings("unchecked")    @Override    public List<SystemRegion> getSystemRegionsByName(String name, PageDto page) {        if (page == null) {            return this                    .find(getSql(get_system_region_by_name), new Object[] { name }, SystemRegionRowMapper.instance());        }        else {            return this.findForPage(getSql(get_system_region_by_name), new Object[] { name },                    SystemRegionRowMapper.instance(), page);        }    }    @SuppressWarnings("unchecked")    @Override    public List<SystemRegion> getSystemRegionLikeSpell(String regionpy) {        return find(getSql(get_system_region_like_spell), new Object[] { regionpy }, SystemRegionRowMapper.instance());    }    @SuppressWarnings("unchecked")    @Override    public List<SystemRegion> getSystemRegionsLikeCode(String code) {        return find(getSql(get_system_region_like_code), new Object[] { code }, SystemRegionRowMapper.instance());    }    @SuppressWarnings("unchecked")    @Override    public List<SystemRegion> listCitys(String province) {        return find(getSql(list_region_city), new Object[] { province + "%" }, SystemRegionRowMapper.instance2());    }    @SuppressWarnings("unchecked")    @Override    public List<SystemRegion> listCountys(String city) {        return find(getSql(list_region_county), new Object[] { city + "%" }, SystemRegionRowMapper.instance2());    }    @SuppressWarnings("unchecked")    @Override    public List<SystemRegion> listProvinces() {        return find(getSql(list_region_province), new Object[] {}, SystemRegionRowMapper.instance2());    }    @Override    public Map<String, String> getSystemRegionsByName(String[] regionNames) {        return findForInSQL(getSql(map_system_regions_by_name), new Object[] {}, regionNames,                SystemRegionRowMapper.mapMapRow);    }}