package net.zdsoft.chnmaster.service.impl;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.annotation.Resource;import org.apache.commons.lang3.StringUtils;import org.springframework.stereotype.Service;import net.zdsoft.chnmaster.dao.SystemRegionDao;import net.zdsoft.chnmaster.service.SystemRegionService;import net.zdsoft.common.cache.BaseCacheServiceImpl;import net.zdsoft.common.cache.CacheCall.CacheObjectMapParam;import net.zdsoft.common.cache.CacheCall.CacheObjectsParam;import net.zdsoft.common.constant.DataTypeConstants;import net.zdsoft.common.entity.PageDto;import net.zdsoft.common.entity.system.SystemRegion;import net.zdsoft.common.utils.PinyinUtil;import net.zdsoft.keel.util.Validators;/** * 行政区划表【t_system_region】 * * @author * */@Service("systemRegionService")public class SystemRegionServiceImpl extends BaseCacheServiceImpl implements SystemRegionService {    private static final String GET_SYSTEM_REGIONS = "getSystemRegions";    private static final String GET_SYSTEM_REGIONS_MAP = "getSystemRegionsMap";    @Resource    private SystemRegionDao systemRegionDao;    @Override    public int saveSystemRegion(SystemRegion systemRegion) {        if (StringUtils.isEmpty(systemRegion.getShortSpell())) {            systemRegion.setShortSpell(PinyinUtil.getPinyinFirst(systemRegion.getFullName()));        }        int result = systemRegionDao.saveSystemRegion(systemRegion);        // 缓存缓存        if (result > 0) {            clearCache(DataTypeConstants.SYSTEM_REGION, 0);        }        return result;    }    @Override    public int deleteSystemRegion(String id) {        int result = systemRegionDao.deleteSystemRegion(id);        // 缓存缓存        if (result > 0) {            clearCache(DataTypeConstants.SYSTEM_REGION, 0);        }        return result;    }    @Override    public int updateSystemRegion(SystemRegion systemRegion) {        int result = systemRegionDao.updateSystemRegion(systemRegion);        // 缓存缓存        if (result > 0) {            clearCache(DataTypeConstants.SYSTEM_REGION, 0);        }        return result;    }    @Override    public SystemRegion getSystemRegion(String id) {        return systemRegionDao.getSystemRegion(id);    }    @Override    public List<SystemRegion> getSystemRegions() {        return this.getObjectsFromCache(new CacheObjectsParam<SystemRegion>() {            @Override            public String getDataType() {                return DataTypeConstants.SYSTEM_REGION;            }            @Override            public Long getAgencyId() {                return 0l;            }            @Override            public String fetchKey() {                return getKeyName(getDataType(), getAgencyId(), GET_SYSTEM_REGIONS);            }            @Override            public List<SystemRegion> fetchObjects() {                return systemRegionDao.getSystemRegions();            }        });    }    @Override    public List<SystemRegion> getSystemRegions(PageDto page) {        return systemRegionDao.getSystemRegions(page);    }    @Override    public SystemRegion getSystemRegionsByFullCode(String code) {        Map<String, SystemRegion> regionMap = getSystemRegionsMap();        if (null != regionMap) {            return regionMap.get(code);        }        else {            return systemRegionDao.getSystemRegionByFullCode(code);        }    }    @Override    public List<SystemRegion> getSystemRegionsByName(String regionName, PageDto page) {        return systemRegionDao.getSystemRegionsByName(regionName, page);    }    @Override    public List<SystemRegion> getSystemRegionBySpell(String regionpy) {        return systemRegionDao.getSystemRegionLikeSpell(regionpy);    }    @Override    public List<SystemRegion> getSystemRegionsLikeCode(String code) {        return systemRegionDao.getSystemRegionsLikeCode(code);    }    @Override    public List<SystemRegion> listProvinces() {        List<SystemRegion> lists = getSystemRegions();        if (!Validators.isEmpty(lists)) {            List<SystemRegion> rtnList = new ArrayList<SystemRegion>();            for (SystemRegion region : lists) {                // 判断是否省级                if (region.getRegionCode().length() == 2 && "00" != region.getRegionCode()) {                    rtnList.add(region);                }            }            lists = null;            return rtnList;        }        else {            return systemRegionDao.listProvinces();        }    }    @Override    public List<SystemRegion> listCitys(String province) {        List<SystemRegion> lists = getSystemRegions();        if (!Validators.isEmpty(lists)) {            List<SystemRegion> rtnList = new ArrayList<SystemRegion>();            for (SystemRegion region : lists) {                // 判断是否区县                if (region.getRegionCode().length() == 4 && region.getRegionCode().startsWith(province)) {                    rtnList.add(region);                }            }            lists = null;            return rtnList;        }        else {            return systemRegionDao.listCitys(province);        }    }    @Override    public List<SystemRegion> listCountys(String city) {        List<SystemRegion> lists = getSystemRegions();        if (!Validators.isEmpty(lists)) {            List<SystemRegion> rtnList = new ArrayList<SystemRegion>();            for (SystemRegion region : lists) {                // 判断是否区县                if (region.getRegionCode().length() == 6 && region.getRegionCode().startsWith(city)                        && !"市辖区".equals(region.getRegionName())) {                    rtnList.add(region);                }            }            lists = null;            return rtnList;        }        else {            return systemRegionDao.listCountys(city);        }    }    @Override    public Map<String, SystemRegion> getSystemRegionsMap() {        return this.getObjectMapFromCache(new CacheObjectMapParam<String, SystemRegion>() {            @Override            public String getDataType() {                return DataTypeConstants.SYSTEM_REGION;            }            @Override            public Long getAgencyId() {                return 0l;            }            @Override            public String fetchKey() {                return getKeyName(getDataType(), getAgencyId(), GET_SYSTEM_REGIONS_MAP);            }            @Override            public Map<String, SystemRegion> fetchObjects() {                List<SystemRegion> lists = getSystemRegions();                if (Validators.isEmpty(lists)) {                    return null;                }                else {                    Map<String, SystemRegion> result = new HashMap<String, SystemRegion>();                    for (SystemRegion ite : lists) {                        result.put(ite.getFullCode(), ite);                    }                    lists = null;                    return result;                }            }        });    }    @Override    public Map<String, String> getSystemRegionsFullname() {        Map<String, String> rtnMap = new HashMap<String, String>();        List<SystemRegion> lists = getSystemRegions();        if (!Validators.isEmpty(lists)) {            for (SystemRegion region : lists) {                rtnMap.put(region.getFullName(), region.getFullCode());            }        }        lists = null;        return rtnMap;    }}